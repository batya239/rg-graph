__author__ = 'dima'


from rggraphenv import symbolic_functions as sf


k0, k1, sp0, a3 = sf.var("k0 k1 sp0 a3")
l0, l1  = sf.var("l0 l1")
e = sf.e


q0 = -sf.CLN_ONE/16*(-2+6*k1*k0**2*a3**2-a3**2+2*k1**2*k0*a3**2+2*k1*a3**2-4*k1**2*k0**2+4*k1+2*k1*k0*sp0*a3-3*k0**2*a3**2+8*k1**2*k0+2*k1**2*k0**2*sp0*a3+4*k0-2*k1**2*k0*sp0*a3+2*k0*a3**2-8*k1*k0-4*k1**2-k1**2*a3**2+4*k1*k0**2-3*k1**2*k0**2*a3**2-4*k1*k0*a3**2-2*k1*k0**2*sp0*a3-2*k0**2)**(-1)*(-1+2*k0-2*k0**2)**(-3)*(-1+k0)**8*(-1+k1)**2*(-1+2*k1*k0**2*a3**2-2*k1**2*k0**2+2*k1+2*k1*k0*sp0*a3-k0**2*a3**2+4*k1**2*k0+2*k1**2*k0**2*sp0*a3+2*k0-2*k1**2*k0*sp0*a3-4*k1*k0-2*k1**2+2*k1*k0**2-k1**2*k0**2*a3**2-2*k1*k0**2*sp0*a3-k0**2)**(-1)



#
# Integrand(a): -1/16*(-2+6*k1*k0**2*a3**2-a3**2+2*k1**2*k0*a3**2+2*k1*a3**2-4*k1**2*k0**2+4*k1+2*k1*k0*sp0*a3-3*k0**2*a3**2+8*k1**2*k0+2*k1**2*k0**2*sp0*a3+4*k0-2*k1**2*k0*sp0*a3+2*k0*a3**2-8*k1*k0-4*k1**2-k1**2*a3**2+4*k1*k0**2-3*k1**2*k0**2*a3**2-4*k1*k0*a3**2-2*k1*k0**2*sp0*a3-2*k0**2)**(-1)*(-1+2*k0-2*k0**2)**(-3)*(-1+k0)**8*(-1+k1)**2*(-1+2*k1*k0**2*a3**2-2*k1**2*k0**2+2*k1+2*k1*k0*sp0*a3-k0**2*a3**2+4*k1**2*k0+2*k1**2*k0**2*sp0*a3+2*k0-2*k1**2*k0*sp0*a3-4*k1*k0-2*k1**2+2*k1*k0**2-k1**2*k0**2*a3**2-2*k1*k0**2*sp0*a3-k0**2)**(-1)
# Integrand(e): tgamma(2-1/2*e)*(-(-1+k0)**(-1)*k0)**(3-e)*Pi**(3/2-1/2*e)*Pi*tgamma(3/2-1/2*e)**(-1)*(Pi**(2-1/2*e))**(-1)*sin(w1*Pi)**(2-e)*(-k1*(-1+k1)**(-1))**(3-e)
q0_d = -sf.CLN_ONE/8*(-2+6*k1*k0**2*a3**2-a3**2+2*k1**2*k0*a3**2+2*k1*a3**2-4*k1**2*k0**2+4*k1+2*k1*k0*sp0*a3-3*k0**2*a3**2+8*k1**2*k0+2*k1**2*k0**2*sp0*a3+4*k0-2*k1**2*k0*sp0*a3+2*k0*a3**2-8*k1*k0-4*k1**2-k1**2*a3**2+4*k1*k0**2-3*k1**2*k0**2*a3**2-4*k1*k0*a3**2-2*k1*k0**2*sp0*a3-2*k0**2)**(-2)*(66*k1**6*k0**2*sp0-202*k1**6*k0**10*a3**3-3*k1*k0**12*sp0+1680*k1**3*k0**2*a3+120*k1**3*k0**12*a3+2880*k1**4*k0**5*sp0**2*a3-7920*k1**5*k0**8*sp0-400*k1**3*k0**3*a3**3-33*k1*k0**2*sp0+4950*k1**2*k0**8*sp0-24*k1**4*k0**2*sp0**2*a3+6*k1**6*k0**12*sp0+1212*k1*k0**10*a3**3-24*k1**4*k0**12*sp0**2*a3+21240*k1**4*k0**8*sp0*a3**2+700*k0**9*a3-1410*k1**4*k0**4*a3**3+3192*k1**5*k0**6*a3**3-12870*k1**4*k0**5*sp0-7980*k1**2*k0**6*a3**3+12510*k1**3*k0**9*sp0*a3**2-60*k1**5*k0**12*sp0*a3**2+11088*k1**5*k0**7*sp0-66*k1**6*k0**11*sp0-6930*k1**2*k0**7*sp0-21*k1**4*a3-1248*k1**3*k0**11*a3+464*k1**6*k0**9*a3**3+3360*k1**5*k0**8*sp0**2*a3+6750*k1**5*k0**4*a3+2124*k1**6*k0**8*sp0*a3**2-37044*k1**4*k0**6*a3-840*k1**2*k0**8*sp0**2*a3-2784*k1*k0**9*a3**3+60*k1**2*k0**12*sp0*a3**2+252*k1**4*k0*a3+33*k1*k0**11*sp0-10800*k1**2*k0**4*a3-4*k1**6*k0**12*sp0**2*a3-4*k1**6*k0**2*sp0**2*a3-2124*k1*k0**8*sp0*a3**2-246*k0**10*a3+165*k1**2*k0**2*sp0*a3**2-6570*k1**2*k0**5*sp0*a3**2+480*k1**6*k0**5*sp0**2*a3+6570*k1**5*k0**5*sp0*a3**2-165*k1**5*k0**2*sp0*a3**2+330*k1**6*k0**10*sp0+36*k1*k0**12*a3**3-2*k1**6*k0**2*a3**3-1560*k1*k0**3*a3+5904*k1**3*k0**10*a3-25200*k1**4*k0**7*sp0*a3**2-1740*k1**4*k0**3*sp0*a3**2+4200*k1**5*k0**8*a3**3+520*k1**6*k0**3*a3+240*k1**4*k0**11*sp0**2*a3-6*k1**6*k0**12*a3**3-165*k1*k0**10*sp0+12*k1*k0**2*a3**3+1815*k1**3*k0**3*sp0-10500*k1**2*k0**8*a3**3+52*k0**11*a3+37800*k1**4*k0**7*a3+3360*k1**3*k0**6*sp0**2*a3-11088*k1**5*k0**6*sp0-15*k1**2*k0*sp0+6435*k1**4*k0**4*sp0+24*k1**5*k0*sp0+6930*k1**2*k0**6*sp0+4080*k1**4*k0**5*a3**3+52*k1**6*k0**11*a3**3-4368*k1**5*k0**7*a3**3-16800*k1**3*k0**9*a3-5760*k1**3*k0**4*sp0*a3**2+2520*k1*k0**7*sp0*a3**2+10*k1**5*a3-990*k1**6*k0**9*sp0+10920*k1**2*k0**7*a3**3+20352*k1**2*k0**5*a3+495*k1*k0**9*sp0-4890*k1**3*k0**10*sp0*a3**2-312*k1*k0**11*a3**3+174*k1*k0**3*sp0*a3**2-12720*k1**5*k0**5*a3-70*k0**2*a3+40*k1**2*k0**3*sp0**2*a3-570*k1**2*k0**11*sp0*a3**2-4032*k1**5*k0**7*sp0**2*a3+40*k1**6*k0**11*sp0**2*a3-174*k1**6*k0**3*sp0*a3**2-2520*k1**6*k0**7*sp0*a3**2+20*k0**3*a3**3+570*k1**5*k0**11*sp0*a3**2-160*k1**5*k0**3*sp0**2*a3-28035*k1**4*k0**8*a3+1008*k1**2*k0**7*sp0**2*a3-5*k0**12*a3+3360*k1**5*k0**6*sp0**2*a3-3*k1**6*k0*sp0*a3**2-1080*k1**4*k0**4*sp0**2*a3+12870*k1**4*k0**8*sp0-840*k1**2*k0**6*sp0**2*a3-1080*k1**4*k0**10*sp0**2*a3+2142*k1**6*k0**6*sp0*a3**2-202*k0**10*a3**3+7920*k1**5*k0**5*sp0-1410*k1**2*k0**4*a3**3+564*k1**5*k0**4*a3**3-2142*k1*k0**6*sp0*a3**2-4200*k1*k0**9*a3-4950*k1**2*k0**5*sp0-7980*k1**4*k0**6*a3**3+3*k1*k0*sp0*a3**2-1040*k1**3*k0**11*a3**3+1400*k1**6*k0**9*a3+5445*k1**3*k0**9*sp0-4032*k1**3*k0**7*sp0**2*a3-28224*k1**2*k0**6*a3-120*k1**5*k0*a3-14175*k1**4*k0**4*a3+192*k1**2*k0*a3+17640*k1**5*k0**6*a3+464*k0**9*a3**3-2*k1**6*a3+6*k1*a3-18018*k1**4*k0**7*sp0+1140*k1**3*k0**11*sp0*a3**2-160*k1**3*k0**3*sp0**2*a3-6240*k1**3*k0**3*a3-180*k1**6*k0**10*sp0**2*a3+21420*k1**4*k0**6*sp0*a3**2+2445*k1**2*k0**10*sp0*a3**2+1476*k1*k0**10*a3+120*k1**3*k0**12*a3**3-2880*k1**5*k0**4*sp0*a3**2-330*k1**6*k0**3*sp0+2880*k1**2*k0**4*sp0*a3**2-1815*k1**3*k0**10*sp0+165*k1*k0**3*sp0-180*k1**6*k0**4*sp0**2*a3+40*k1**3*k0**2*a3**3-30*k1**4*k0*sp0*a3**2-492*k1**6*k0**10*a3-2445*k1**5*k0**10*sp0*a3**2-6*k0**12*a3**3-10500*k1**4*k0**8*a3**3+260*k0**3*a3+2880*k1**4*k0**9*sp0**2*a3-2*k0**2*a3**3-312*k1*k0**11*a3+2475*k1**2*k0**4*sp0-1632*k1**5*k0**5*a3**3-39*k1**4*k0*sp0+18018*k1**4*k0**6*sp0+4080*k1**2*k0**5*a3**3-3960*k1**5*k0**4*sp0+28800*k1**2*k0**7*a3+363*k1**3*k0**11*sp0-18000*k1**5*k0**7*a3+104*k1**6*k0**11*a3-9280*k1**3*k0**9*a3**3+26712*k1**4*k0**5*a3-330*k1**3*k0**2*sp0*a3**2+10920*k1**4*k0**7*a3**3+52*k0**11*a3**3+13140*k1**3*k0**5*sp0*a3**2-10*k1**6*k0**12*a3+3360*k1**3*k0**8*sp0**2*a3+420*k1*k0**2*a3-21360*k1**2*k0**8*a3+20*k1**6*k0**3*a3**3+13350*k1**5*k0**8*a3-33*k1**3*k0**12*sp0+6255*k1**5*k0**9*sp0*a3**2-120*k1**3*k0**12*sp0*a3**2+480*k1**6*k0**9*sp0**2*a3-363*k1**3*k0**2*sp0-120*k1*k0**3*a3**3+4040*k1**3*k0**10*a3**3-6255*k1**2*k0**9*sp0*a3**2+30*k1*k0**12*a3-140*k1**6*k0**2*a3+10620*k1**2*k0**8*sp0*a3**2-33*k1*k0**2*sp0*a3**2-840*k1**6*k0**8*sp0**2*a3-1980*k1**6*k0**5*sp0-532*k0**6*a3**3-30528*k1**3*k0**5*a3+12*k1**6*k0**12*sp0*a3**2-4*k1**2*k0**12*sp0**2*a3-94*k1**6*k0**4*a3**3+1314*k1*k0**5*sp0*a3**2-7000*k1**5*k0**9*a3-1920*k1**3*k0**9*sp0**2*a3-14560*k1**3*k0**7*a3**3+564*k1*k0**4*a3**3+16*k1**5*k0**12*sp0**2*a3-10620*k1**5*k0**8*sp0*a3**2+990*k1*k0**5*sp0+11200*k1**2*k0**9*a3+39*k1**4*k0**12*sp0-1920*k1**5*k0**5*sp0**2*a3+16*k1**5*k0**2*sp0**2*a3-4*k1**2*k0**2*sp0**2*a3+33*k1**6*k0**2*sp0*a3**2-1314*k1**6*k0**5*sp0*a3**2-3030*k1**4*k0**10*a3**3-12*k1*k0**12*sp0*a3**2+429*k1**4*k0**2*sp0+480*k1**2*k0**5*sp0**2*a3+14000*k1**3*k0**8*a3**3-825*k1**2*k0**3*sp0-13140*k1**4*k0**5*sp0*a3**2+1320*k1**5*k0**3*sp0+330*k1**4*k0**2*sp0*a3**2-3936*k1**2*k0**10*a3+2460*k1**5*k0**10*a3+24*k1**6*k0*a3-15246*k1**3*k0**6*sp0+33*k1**3*k0*sp0-3528*k1**6*k0**6*a3-675*k0**4*a3+10584*k1*k0**6*a3+6960*k1**4*k0**9*a3**3+120*k1**4*k0**12*sp0*a3**2-429*k1**4*k0**11*sp0-5040*k1**4*k0**8*sp0**2*a3-72*k1*k0*a3+272*k1**6*k0**5*a3**3-10800*k1*k0**7*a3+16200*k1**3*k0**4*a3+720*k1**3*k0**10*sp0**2*a3+990*k1**6*k0**4*sp0+114*k1*k0**11*sp0*a3**2+832*k1**2*k0**11*a3-495*k1*k0**4*sp0+15246*k1**3*k0**7*sp0+720*k1**3*k0**4*sp0**2*a3-1632*k1*k0**5*a3**3-520*k1**5*k0**11*a3+3600*k1**6*k0**7*a3-12600*k1**2*k0**7*sp0*a3**2-160*k1**5*k0**11*sp0**2*a3+1008*k1**6*k0**7*sp0**2*a3-90*k1**4*k0**12*a3**3+870*k1**5*k0**3*sp0*a3**2+5460*k1**4*k0**3*a3-700*k0**8*a3**3-114*k1**6*k0**11*sp0*a3**2+12600*k1**5*k0**7*sp0*a3**2+40*k1**6*k0**3*sp0**2*a3-30*k1**4*k0**2*a3**3-870*k1**2*k0**3*sp0*a3**2+40*k1**2*k0**11*sp0**2*a3+2145*k1**4*k0**10*sp0-10890*k1**3*k0**8*sp0+300*k1**2*k0**3*a3**3-16*k1**2*a3+50*k1**5*k0**12*a3+240*k1**4*k0**3*sp0**2*a3-1140*k1**4*k0**11*sp0*a3**2-80*k1**2*k0**12*a3-120*k1**5*k0**3*a3**3-2670*k1**6*k0**8*a3-1120*k1**2*k0**2*a3+8010*k1*k0**8*a3+6048*k1**4*k0**7*sp0**2*a3+700*k1**5*k0**2*a3+1272*k0**5*a3+30*k1**3*k0*sp0*a3**2+10640*k1**3*k0**6*a3**3-6435*k1**4*k0**9*sp0-21420*k1**3*k0**6*sp0*a3**2+780*k1**4*k0**11*a3**3+728*k0**7*a3**3-489*k1*k0**10*sp0*a3**2-160*k1**3*k0**11*sp0**2*a3+14700*k1**4*k0**9*a3+3192*k1*k0**6*a3**3+1740*k1**3*k0**3*sp0*a3**2-532*k1**6*k0**6*a3**3-576*k1*k0**4*sp0*a3**2+25200*k1**3*k0**7*sp0*a3**2-94*k0**4*a3**3+1212*k1**5*k0**10*a3**3+576*k1**6*k0**4*sp0*a3**2-180*k1**2*k0**4*sp0**2*a3-264*k1**5*k0**2*sp0+165*k1**2*k0**2*sp0-990*k1*k0**8*sp0+720*k1**5*k0**10*sp0**2*a3-3030*k1**2*k0**10*a3**3-180*k1**2*k0**10*sp0**2*a3+1980*k1**6*k0**8*sp0+15*k1**2*k0**12*sp0-5040*k1**4*k0**6*sp0**2*a3+489*k1**6*k0**10*sp0*a3**2-24*k1**5*k0**12*sp0+32040*k1**3*k0**8*a3+720*k1**5*k0**4*sp0**2*a3-5166*k1**4*k0**10*a3-840*k1**6*k0**6*sp0**2*a3+4890*k1**4*k0**10*sp0*a3**2+15*k1**5*k0*sp0*a3**2+10710*k1**2*k0**6*sp0*a3**2-2145*k1**4*k0**3*sp0-10710*k1**5*k0**6*sp0*a3**2-15*k1**2*k0*sp0*a3**2+5760*k1**4*k0**4*sp0*a3**2+264*k1**5*k0**11*sp0-2772*k1**6*k0**7*sp0+6960*k1**2*k0**9*a3**3-2784*k1**5*k0**9*a3**3-165*k1**2*k0**11*sp0-43200*k1**3*k0**7*a3+4050*k1*k0**4*a3-5440*k1**3*k0**5*a3**3-1764*k0**6*a3-1350*k1**6*k0**4*a3-5445*k1**3*k0**4*sp0+1386*k1*k0**7*sp0+12*k0*a3+3*k1*k0*sp0+1800*k0**7*a3+16*k1**3*k0**2*sp0**2*a3+1092*k1**4*k0**11*a3-1920*k1**3*k0**5*sp0**2*a3-1386*k1*k0**6*sp0+1251*k1*k0**9*sp0*a3**2-288*k1**3*k0*a3+2772*k1**6*k0**6*sp0-6*k1**6*k0*sp0+42336*k1**3*k0**6*a3+272*k0**5*a3**3+12*k1**5*k0**2*a3**3+480*k1**2*k0**9*sp0**2*a3-1320*k1**5*k0**10*sp0-a3-1251*k1**6*k0**9*sp0*a3**2+825*k1**2*k0**10*sp0+24*k1**3*a3-30*k1**2*k0**2*a3**3+4200*k1*k0**8*a3**3-90*k1**2*k0**12*a3**3-700*k1**6*k0**8*a3**3-2600*k1**5*k0**3*a3-21240*k1**3*k0**8*sp0*a3**2-1920*k1**5*k0**9*sp0**2*a3+16*k1**3*k0**12*sp0**2*a3+4160*k1**2*k0**3*a3+36*k1**5*k0**12*a3**3-1470*k1**4*k0**2*a3-1335*k0**8*a3+300*k1**4*k0**3*a3**3-12510*k1**4*k0**9*sp0*a3**2-105*k1**4*k0**12*a3-2475*k1**2*k0**9*sp0-7632*k1*k0**5*a3+728*k1**6*k0**7*a3**3-312*k1**5*k0**11*a3**3+780*k1**2*k0**11*a3**3+3960*k1**5*k0**9*sp0+10890*k1**3*k0**5*sp0+2544*k1**6*k0**5*a3-4368*k1*k0**7*a3**3+1880*k1**3*k0**4*a3**3)*(-1+2*k0-2*k0**2)**(-3)*(-1+2*k1*k0**2*a3**2-2*k1**2*k0**2+2*k1+2*k1*k0*sp0*a3-k0**2*a3**2+4*k1**2*k0+2*k1**2*k0**2*sp0*a3+2*k0-2*k1**2*k0*sp0*a3-4*k1*k0-2*k1**2+2*k1*k0**2-k1**2*k0**2*a3**2-2*k1*k0**2*sp0*a3-k0**2)**(-2)
# Integrand
#

print q0.subs(k0==0.5).subs(k1==0.5).subs(sp0==0.5).subs(a3==0.5).evalf()
print q0.subs(k0==0.7).subs(k1==0.5).subs(sp0==0.5).subs(a3==0.7).evalf()

print q0_d.subs(k0==0.5).subs(k1==0.5).subs(sp0==0.5).subs(a3==0.5).evalf()
print q0_d.subs(k0==0.7).subs(k1==0.5).subs(sp0==0.5).subs(a3==0.7).evalf()
#0.0168
#4e-04